package leetcode;

import java.util.Arrays;

public class maopao {

	public static void main(String[] args) {
		int[] ceshi=new int[]{4,2,6,2,8,5,11,3,99,77};
		//maopao(ceshi);
		//insetsort(ceshi);
		shellsort(ceshi);
		printarray(ceshi);
	}
	public static void maopao(int[] shuzu){
		for(int i=1;i<shuzu.length;i++){
			for(int k=0;k<shuzu.length-i;k++){
				if(shuzu[k]>shuzu[k+1]){
					int temp=shuzu[k];
					shuzu[k]=shuzu[k+1];
					shuzu[k+1]=temp;
				}
			}
		}
	}
	public static void printarray(int[] shuzu){
		for(int i=0;i<shuzu.length;i++){
			System.out.println(shuzu[i]);
		}
	}
	public static void shellsort(int[] arr){
       //增量gap，并逐步缩小增量
        for(int gap=arr.length/2;gap>0;gap/=2){
           //从第gap个元素，逐个对其所在组进行直接插入排序操作
        	for(int i=gap;i<arr.length;i++){
               int j = i;
               while(j-gap>=0 && arr[j]<arr[j-gap]){
                   //插入排序采用交换法
                    swap(arr,j,j-gap);
                    j-=gap;
                }
            }
        }
			     
	}
	public static void insetsort(int[] arr){		
	        for (int i = 1; i < arr.length; i++) {
	            int tmp = arr[i];
	            int j = i;
	            while (j > 0 && tmp < arr[j - 1]) {
	                arr[j] = arr[j - 1];
	                j--;
	            }
	            if (j != i) {
	                arr[j] = tmp;
	            }

	        }
	     
	}
	public static void selectsort(int[] shuzu){
		for(int i=0;i<shuzu.length;i++){
			for(int k=i;k<shuzu.length;k++){
				if(shuzu[i]>shuzu[k]){
					int temp=shuzu[i];
					shuzu[i]=shuzu[k];
					shuzu[k]=temp;
				}
			}
		}
	}
	public static void quicksort(int[] shuzu){
		
	}
	public static void swap(int []arr,int a,int b){
		         arr[a] = arr[a]+arr[b];
		         arr[b] = arr[a]-arr[b];
		         arr[a] = arr[a]-arr[b];
	}
}
